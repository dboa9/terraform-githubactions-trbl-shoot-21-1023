# # -------------------------------********dboi******-------------------
# # https://youtu.be/3Gm2Tuh4vpc
# # https://github.com/sajjasgit/demo-github-action-terraform/blob/main/.github/workflows/terraform.yml
# # https://github.com/dboa9/terraform-githubactions-trbl-shoot-21-1023/new/master?filename=.github%2Fworkflows%2Fterraform.yml&workflow_template=deployments%2Fterraform
# # -------------------------------********dboi******-------------------

# # This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# # with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# # `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# # to the "master" branch, `terraform apply` will be executed.
# #
# # Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
# #
# # To use this workflow, you will need to complete the following setup steps.
# #
# # 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
# #   Example `main.tf`:
# #     # The configuration for the `remote` backend.
# #     terraform {
# #       backend "remote" {
# #         # The name of your Terraform Cloud organization.
# #         organization = "example-organization"
# #
# #         # The name of the Terraform Cloud workspace to store Terraform state files in.
# #         workspaces {
# #           name = "example-workspace"
# #         }
# #       }
# #     }
# #
# #     # An example resource that does nothing.
# #     resource "null_resource" "example" {
# #       triggers = {
# #         value = "A example resource that does nothing!"
# #       }
# #     }
# #
# #
# # 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
# #   Documentation:
# #     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
# #     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
# #
# # 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
# #   Example:
# #     - name: Setup Terraform
# #       uses: hashicorp/setup-terraform@v1
# #       with:
# #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#    #***************
#    # dboedited
   #*************
name: 'Terraform'
# dboedited
on:
  workflow_dispatch:
    inputs:
      terraform_action:
        type: choice
        description: select terraform action
        options:
        - apply
        - destroy
        required: true
  push:

    branches: [ "main" ]
# dboedited
jobs:
  terraform:
    name: 'Terraform'
    env:
        # AWS Secrets
        # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
        # AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION}}


    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  # dboedited
    defaults:
      run:
        shell: bash
  # dboedited
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

# ===================DBO TERROFORM CLOUD=================
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

        # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

   #***************
   # dboedited
   #*************
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.3
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: '.'
        tf_actions_comment: true
        args: '-var="instance_type=t2.medium"'

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
   #***************
   # dboedited
   #*************
    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.3
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: '.'
        tf_actions_comment: true
        args: '-var="instance_type=t2.medium"'

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
   #***************
   # dboedited
   #*************
    - name: Terraform apply
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.3
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: '.'
        tf_actions_comment: true
        args: '-auto-approve -var="instance_type=t2.medium"'

      - name: Terraform destroy
      if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.3
        tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
        tf_actions_working_dir: '.'
        tf_actions_comment: true
        args: '-auto-approve -var="instance_type=t2.medium"'

# *********************************************************

# **************************************************************
# name: "Terraform"

# on:
#   workflow_dispatch:
#     inputs:
#       terraform_action:
#         type: choice
#         description: select terraform action
#         options:
#           - apply
#           - destroy
#         required: true
#   push:
#     branches: ["main"]

# jobs:
#   terraform:
#     name: "Terraform"
#     env:
#       # AWS secrets
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}

#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#       # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v3

#       # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#       - name: Terraform Init
#         uses: hashicorp/terraform-github-actions@master
#         with:
#           tf_actions_version: 0.14.3
#           tf_actions_subcommand: "init"
#           tf_actions_working_dir: "."
#           tf_actions_comment: true
#           args: '-var="instance_type=t2.medium"'

#       - name: Terraform plan
#         uses: hashicorp/terraform-github-actions@master
#         with:
#           tf_actions_version: 0.14.3
#           tf_actions_subcommand: "plan"
#           tf_actions_working_dir: "."
#           tf_actions_comment: true
#           args: '-var="instance_type=t2.medium"'

#       - name: Terraform apply
#         if: ${{ github.event.inputs.terraform_action == 'apply' }}
#         uses: hashicorp/terraform-github-actions@master
#         with:
#           tf_actions_version: 0.14.3
#           tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
#           tf_actions_working_dir: "."
#           tf_actions_comment: true
#           args: '-auto-approve -var="instance_type=t2.medium"'

#       - name: Terraform destroy
#         if: ${{ github.event.inputs.terraform_action == 'destroy' }}
#         uses: hashicorp/terraform-github-actions@master
#         with:
#           tf_actions_version: 0.14.3
#           tf_actions_subcommand: ${{ github.event.inputs.terraform_action }}
#           tf_actions_working_dir: "."
#           tf_actions_comment: true
#           args: '-auto-approve -var="instance_type=t2.medium"'

# *******************************************************

# **********************************************************

name: Deploy Chat GPT API Lambda

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION}}

      #     - name: Create S3 bucket
      #       run: |
      #         aws s3 mb s3://lex-terraform-anlam-10-4-23-amlan
      # build_and_deploy:
      #   name: Build and Deploy Lambda
      #   runs-on: ubuntu-latest
      #   needs: create_s3
      #   steps:
      #     - name: Checkout repository
      #       uses: actions/checkout@v2
      #     - name: Configure AWS credentials
      #       uses: aws-actions/configure-aws-credentials@v1
      #       with:
      #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #         aws-region: ${{ secrets.AWS_DEFAULT_REGION}}

      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.9"
      # - name: Install Python packages
      #   run: |
      #     cd lambda_code/app_code
      #     pip install -r requirements.txt -t .
      #     zip -r app.zip ./*
      #     cp app.zip lex-terraform-anlam-10-4-23/app.zip
      #     cd ../..
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      # - name: Terraform Init
      #   id: init
      #   run: |
      #     terraform init
      # - name: Terraform Plan
      #   id: plan
      #   run: |
      #     terraform plan -no-color -input=false
      #   continue-on-error: true
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      # - name: Terraform Apply
      #   run: |
      #     terraform apply -auto-approve -input=false
